# .github/workflows/ci.yml

name: PX4 CI Build

on:
  push:
    branches:
      - vortex-dev
  pull_request:
    branches:
      - vortex-dev

jobs:
  build:
    runs-on: ubuntu-22.04  # Explicitly specify the Ubuntu version

    env:
      CCACHE_DIR: /tmp/ccache
      PX4_DIR: ${{ github.workspace }}

    steps:
      # Step 1: Checkout Repository with Submodules and Full History
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0  # Fetch all history to enable git describe

      # Step 2: Check Ubuntu Version (For Debugging)
      - name: Check Ubuntu Version
        run: lsb_release -a

      # Step 3: Fix Ubuntu Codename if Incorrect
      - name: Fix Ubuntu Codename
        run: |
          sudo sed -i 's/noble/jammy/g' /etc/apt/sources.list
          sudo sed -i 's/noble/jammy/g' /etc/apt/sources.list.d/*.list || true
          sudo add-apt-repository universe
          sudo apt-get update

      # Step 4: Install Dependencies Including ccache and Python Modules
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git zip python3-pip cmake ninja-build gcc-arm-none-eabi python3-empy python3-toml ccache libxml2-dev libxslt-dev
          pip3 install --upgrade pip
          pip3 install kconfiglib pyros-genmsg symforce lxml future --break-system-packages

      # Step 5: Configure CCache
      - name: Set Up CCache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Initialize CCache
        run: |
          mkdir -p $CCACHE_DIR
          export CCACHE_DIR=$CCACHE_DIR
          ccache -M 200M
          ccache -s

      # Step 6: Set Git Tag for PX4 (Optional)
      - name: Set PX4_GIT_TAG
        run: |
          git tag -f v0.0.0
          export PX4_GIT_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "PX4_GIT_TAG=$PX4_GIT_TAG" >> $GITHUB_ENV

      # Step 7: Build PX4 Firmware with Suppressed Developer Warnings
      - name: Build PX4 Firmware
        run: |
          cd $PX4_DIR
          make px4_fmu-v6x_default CFLAGS="-Wno-dev"

      # Step 8: Check CCache Statistics After Build
      - name: CCache Statistics
        run: |
          ccache -s

      # Step 9: Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: px4-build-${{ github.ref }}
          path: |
            build/px4_fmu-v6x_default/bin/*.px4
            build/px4_fmu-v6x_default/bin/*.elf
            build/px4_fmu-v6x_default/bin/*.bin

